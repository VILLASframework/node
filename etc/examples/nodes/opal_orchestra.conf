# SPDX-FileCopyrightText: 2025, OPAL-RT Germany GmbH
# SPDX-License-Identifier: Apache-2.0

stats = 1

nodes = {
    domain1 = {
        type = "opal.orchestra"

        # Path  to the OPAL-RT Orchestra Data Defintion XML file (DDF).
        ddf = "orchestra.xml"

        # Enable to overwrite the DDF file.
        # This is useful when you want to generate the DDF file from the configuration file
        # for importing it into RT-LAB or HYPERSIM.
        ddf_overwrite = true

        # Orchestra domain name.
        domain = "domain1"

        # Connection timeout in seconds.
        connect_timeout = 2

        # Define the delay to wait when using flag synchronisation (XHP).
        # This will call the system function usleep and free the CPU.
        # In micro-seconds.
        flag_delay = 0

        # Force the local Orchestra communication to be made with flag instead of semaphore when using an external communication process.
        # Define the delay to wait, this will call the system function usleep and free the CPU.
        # In micro-seconds.
        use_flag_with_tool = false
        skip_wait_to_go = false

        rate = 500.0;

        # The following parameters are used to generate the Orchestra DDF XML file.
        synchronous = false
        states = false
        multiple_publish_allowed = false

        connection = {
            # One of: local, remote or dolphin
            type = "local"

            # For 'local'
            extcomm = "udp";
            addrframework = "10.168.13.5";
            portframework = 10000
            coreframework = 0
            coreclient = 0
            nicframework = "eno2"
            nicclient = "eno1"

            # For 'remote'
            card = "test"
            pciindex = 0

            # For 'dolphin'
            nodeIdFramework = 0
            segmentId = 0
        }

        in = {
            hooks = (
                { type = "stats" },
                { type = "print" }
            )

            signals = (
                {
                    name = "pub_signal1",
                    type = "float"

                    orchestra_name = "pub_signal_float"
                    orchestra_type = "float64"
                    orchestra_index = 0
                },
                {
                    name = "pub_signal2",
                    type = "float"

                    orchestra_name = "pub_signal_float"
                    orchestra_type = "float64"
                },
                { name = "signal_float", orchestra_name = "some_bus/signal_float", orchestra_type = "float64", orchestra_index = 2 },
                { name = "signal_bool", orchestra_name = "some_bus/signal_bool", orchestra_type = "boolean" },
                { name = "signal_uint8", orchestra_name = "some_bus/some_nested_bus/signal_uint8", orchestra_type = "unsigned int8" },
                { name = "signal_uint8_2", orchestra_type = "unsigned int8" }
            )
        }

        out = {
            signals = (
                { name="pub_signal_float", init = 1.2, orchestra_name = "sub_signal_float", type = "float" }
            )
        }
    }
}

paths = (
    {
        in = "domain1"
        out = "domain1"
    }
)

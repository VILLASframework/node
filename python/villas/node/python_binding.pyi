"""
@generated by mypy (partial). Manual edits applied for pybind11 binding.
isort:skip_file

Author: Kevin Vu te Laar <vu.te@rwth-aachen.de>
SPDX-FileCopyrightText: 2014-2025 Institute for Automation of Complex Power Systems, RWTH Aachen University
SPDX-License-Identifier: Apache-2.0
"""

import typing
from typing import Any, overload

Array = Any
capsule = Any
timespec = Any

class SamplesArray:
    def __init__(self, len: int) -> None: ...
    def bulk_alloc(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def get_block(self, arg0: int) -> capsule: ...
    def __getitem__(self, arg0: int) -> capsule: ...
    def __iter__(self) -> typing.Iterator[capsule]: ...
    def __setitem__(self, arg0: int, arg1: capsule) -> None: ...

def memory_init(arg0: int) -> int: ...
def node_check(arg0: capsule) -> int: ...
def node_destroy(arg0: capsule) -> int: ...
def node_details(arg0: capsule) -> str: ...
def node_input_signals_max_cnt(arg0: capsule) -> int: ...
def node_is_enabled(arg0: capsule) -> bool: ...
def node_is_valid_name(arg0: str) -> bool: ...
def node_name(arg0: capsule) -> str: ...
def node_name_full(arg0: capsule) -> str: ...
def node_name_short(arg0: capsule) -> str: ...
def node_netem_fds(arg0: capsule, arg1: int) -> int: ...
def node_new(arg0: str, arg1: str) -> capsule: ...
def node_output_signals_max_cnt(arg0: capsule) -> int: ...
def node_pause(arg0: capsule) -> int: ...
def node_poll_fds(arg0: capsule, arg1: int) -> int: ...
def node_prepare(arg0: capsule) -> int: ...
@overload
def node_read(arg0: capsule, arg1: Array, arg2: int) -> int: ...
@overload
def node_read(arg0: capsule, arg1: capsule, arg2: int) -> int: ...  # type: ignore[overload-cannot-match]
def node_restart(arg0: capsule) -> int: ...
def node_resume(arg0: capsule) -> int: ...
def node_reverse(arg0: capsule) -> int: ...
def node_start(arg0: capsule) -> int: ...
def node_stop(arg0: capsule) -> int: ...
def node_to_json_str(arg0: capsule) -> str: ...
@overload
def node_write(arg0: capsule, arg1: Array, arg2: int) -> int: ...
@overload
def node_write(arg0: capsule, arg1: capsule, arg2: int) -> int: ...  # type: ignore[overload-cannot-match]
def sample_alloc(arg0: int) -> capsule: ...
def sample_decref(arg0: capsule) -> None: ...
def sample_length(arg0: capsule) -> int: ...
def sample_pack(
    arg0: int, arg1: timespec, arg2: timespec, arg3: int, arg4: float
) -> capsule: ...
def sample_unpack(
    arg0: capsule,
    arg1: int,
    arg2: timespec,
    arg3: timespec,
    arg4: int,
    arg5: int,
    arg6: float,
) -> None: ...
def smps_array(arg0: int) -> Array: ...
